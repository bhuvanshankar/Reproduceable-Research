ls()
rm(list=ls())
quit()
unique(acs$AGEP)
source('~/.active-rstudio-document')
######## Question 1 ########
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "ClientID", "ClientSecret")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
stop_for_status(req)
content(req)
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
######## Question 2 ########
library(sqldf)
acs <- download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", destfile = "acs.csv")
acs <- read.csv("acs.csv")
sqldf("select pwgtp1 from acs where AGEP < 50")
######## Question 3 ########
unique(acs$AGEP)
sqldf("select distinct AGEP from acs")
fUrl <- "http://biostat.jhsph.edu/~jleek/contact.html"
fUrl <- url(fUrl)
htmlCode <- readLines(fUrl)
close(fUrl)
sapply(htmlCode[c(10, 20, 30, 100)], nchar)
data <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", data.for)
data <- read.csv("data.for", header=T)
data <- download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", data.for)
data <- download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", "data.for")
data <- read.csv("data.for", header=T)
head(data)
View(data)
dim(data)
df <- read.fwf(file=data,widths=c(-1,9,-5,4,4,-5,4,4,-5,4,4,-5,4,4), skip=4)
head(df)
df <- read.fwf(file=data,widths=c(-1,9,-5,4,4,-5,4,4,-5,4,4,-5,4,4), skip=4)
dim(data)
head(data)
?read.fwf
dframe <- read.fwf("data")
data <- download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", "data.for")
#data <- read.csv("data.for", header=T)
dframe <- read.fwf("data")
data <- read.csv("data.for", header=T)
View(data)
data <- download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", "data.for")
#data <- read.csv("data.for", header=T)
dframe <- read.fwf("data", widths = " ")
df <- read.fwf(file=data,widths=c(-1,9,-5,4,4,-5,4,4,-5,4,4,-5,4,4), skip=4)
data <- read.csv("data.for", header=T)
df <- read.fwf(file=data,widths=c(-1,9,-5,4,4,-5,4,4,-5,4,4,-5,4,4), skip=4)
df <- read.fwf(file="data.for", widths=c(-1,9,-5,4,4,-5,4,4,-5,4,4,-5,4,4), skip=4)
df
data <- download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", "data.for")
df <- read.fwf(file="data.for", header = TRUE, widths=c(-1,9,-5,4,4,-5,4,4,-5,4,4,-5,4,4), skip=4)
data <- download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", "data.for")
data <- read.csv("data.for", header=T)
df <- read.fwf(file="data.for", header = TRUE, widths=c(-1,9,-5,4,4,-5,4,4,-5,4,4,-5,4,4), skip=4)
data <- download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", "data.for")
data <- read.csv("data.for", header=T)
df <- read.fwf(file="data.for", widths=c(-1,9,-5,4,4,-5,4,4,-5,4,4,-5,4,4), skip=4)
dim(df)
head(df)
head(data)
sum(df[, 4])
View(cran3)
install.packages("googlePublicData")
install.packages("googleVis")
library("googleVis", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
detach("package:googleVis", unload=TRUE)
library("googleVis", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("Rserve")
source('~/Documents/git/CleaningGettingData/BaltimoreCamera.R')
View(CameraData)
source('~/Documents/git/CleaningGettingData/BaltimoreData/BaltimoreCamera.R')
View(CameraData)
source('~/Documents/git/CleaningGettingData/BaltimoreData/BaltimoreCamera.R')
View(CameraData)
autoplot(CameraData$Location.1)
library("ggplot2")
autoplot(CameraData$Location.1)
library("Deducer", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
?deducer
deducer()
detach("package:Deducer", unload=TRUE)
library("maps", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
us.cities("Baltimore")
library("maps")
maps.us.cities
usa
data(usaMapEnv)
swirl()
library(swirl)
swirl()
mydf<-read.csv(path2csv, stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <-tbl_df(mydf)
rm("mydf")
cran
quit()
library(swirl)
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package <- group_by(cran, package)
by_package
summarise(by_package, mean(size))
summarize(by_package, mean(size))
submit()
submit()
count = n(),
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count>679)
top_counts
head(top_counts, 20)
library(swirl)
swirl()
arrange(top_counts, count)
arrange(top_counts, desc(count))
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique>465)
top_unique
arrange(top_unique, desc(unique))
submit()
submit()
?chain
submit()
submit()
submit()
print(chain2)
print(cran)
submit()
submit()
# Use mutate() to add a column called size_mb that contains
# the size of each download in megabytes (i.e. size / 2^20).
#
# If you want your results printed to the console, add
# print to the end of your chain.
cran %>%
select(ip_id,
country,
package,
size) %>%
mutate(size_mb <- size/2^20)
print
# Use mutate() to add a column called size_mb that contains
# the size of each download in megabytes (i.e. size / 2^20).
#
# If you want your results printed to the console, add
# print to the end of your chain.
cran %>%
select(ip_id,
country,
package,
size) %>%
mutate(size_mb <- size/2^20)
print
submit()
submit()
size_mb <- mutate(size/2^20)
submit()
reset()
summarize(cran)
View(top_unique)
View(top_countries)
View(result3)
submit()
submit()
# Use mutate() to add a column called size_mb that contains
# the size of each download in megabytes (i.e. size / 2^20).
#
# If you want your results printed to the console, add
# print to the end of your chain.
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb <- size/2^20)
submit()
submit()
submit()
submit()
submit()
library(swirl)
swirl()
?select
quit()
library(swirl)
rm(list=ls())
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count)
res <- gather(students2, grade, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
students2
res
?separate
separate(res, sex_class, c("sex", "class"))
submit
submit()
submit()
submit()
students3
View(students3)
?gather
submit()
?spread()
?spread
submit()
View(students3)
submit()
submit()
reset()
submit()
submit()
submit()
submit()
reset()
reset()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
gather(class, grade, class1:class5, na.rm = TRUE)
gather(students3, class, grade, class1:class5, na.rm = TRUE)
# This script builds on the previous one by appending
# a call to spread(), which will allow us to turn the
# values of the test column, midterm and final, into
# column headers (i.e. variables).
#
# You only need to specify two arguments to spread().
# Can you figure out what they are? (Hint: You don't
# have to specify the data argument since we're using
# the %>% operator.
#
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, c("midterm","final")) %>%
print
submit()
submit()
submit()
submit()
submit()
?extract_numeric
extract_numeric("class5")
?mutate
submit()
submit()
students4
?select
submit()
submit()
?uniquw
?unique
submit()
submit()
```{r, echo=FALSE}
---
title: "Untitled"
output: html_document
---
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r, echo=FALSE}
plot(cars)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
install.packages(c("cluster", "KernSmooth", "mgcv"))
.10*.09
.10+.09
.12+.06-.17
(.12+.06-.17)*100
.17-.12-.06
(.12+.06)-.17
*100
.17-.12+.06
?qunif
qunif(.75, 0, 1 )
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
p <- c(.1, .2, .3, .4)
x <- 2 : 5
x
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
var(x)
var(Pr)
var(Prob)
var(temp)
mean(c(1,2,3,4))
?mean
?var
?pmf
var(x)
var(X)
install.packages("randomForest")
install.packages(c("cluster", "KernSmooth", "mgcv"))
install.packages("RCurl")
install.packages(c("cluster", "KernSmooth", "mgcv"))
install.packages("RCurl" method = curl)
install.packages(c("cluster", "KernSmooth", "mgcv"))
install.packages("randomForest")
install.packages(c("boot", "codetools", "foreign", "manipulate", "MASS", "Matrix", "mgcv", "nlme"))
install.packages(c("manipulate", "rmarkdown"))
setwd("~/Documents/git/Reproduceable Research/Peer Assessment 1")
data <- download.file("http://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip", "data.zip")
data <- unzip("data.zip")
data <- read.csv("activity.csv")
str(d)
str(data)
View(data)
View(data)
source('~/.active-rstudio-document', echo=TRUE)
stepsTotal <- sum(data$steps)
stepsTotal
?sum
stepsTotal <- sum(data$steps, na.rm = TRUE)
View(data)
?sum
install.packages("dplyr")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
sum(data$steps, group_by(data$date))
```{r, cache=TRUE, echo=TRUE}
library("dplyr")
sum(data$steps, group_by(data$date))
library("dplyr")
sum(data$steps, group_by(data$date))
dataF <- summarise(data, stepsTotal = sum(data$steps))
View(dataF)
?sum
---
title: "Peer Assessment 1"
output: html_document
---
# Loading and preprocessing the data
```{r, cache=TRUE, echo=TRUE}
data <- download.file("http://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip", "data.zip")
data <- unzip("data.zip")
data <- read.csv("activity.csv")
summary(data)
```
# What is mean total number of steps taken per day?
```{r, cache=TRUE, echo=TRUE}
dataF <- summarise(data, stepsTotal = sum(data$steps, na.rm = TRUE))
View(dataF)
dataF <- summarise(data, stepsTotal = sum(data$steps, na.rm = TRUE), group_by(data$steps))
```{r, cache=TRUE, echo=TRUE}
library("dplyr")
stepsTotal <- data %>%
group_by(data$date) %>%
summarise(steps=sum(data$steps))
```{r, cache=TRUE, echo=TRUE}
library("dplyr")
stepsTotal <- data %>%
group_by(data$date) %>%
summarise(steps=sum(data$steps, rm.na = TRUE))
summarise(sum(data$steps, rm.na = TRUE))
library("dplyr")
stepsTotal <- data %>%
group_by(data$date) %>%
summarise(sum(data$steps, rm.na = TRUE))
sum(data$steps, rm.na = TRUE))
sum(data$steps, rm.na = TRUE)
stepsTotal <- data %>%
group_by(data$date) %>%
sum(data$steps, rm.na = TRUE)
```{r, cache=TRUE, echo=TRUE}
data <- download.file("http://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip", "data.zip")
data <- unzip("data.zip")
data <- read.csv("activity.csv")
summary(data)
```
View(data)
stepsPerDay <- ddply(data, ~date, summarise, steps = sum(steps))
stepsPerDay <- ddply(data, ~date, summarise, steps = sum(steps))
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
detach("package:dplyr", unload=TRUE)
---
title: "Peer Assessment 1"
output: html_document
---
# Loading and preprocessing the data
```{r, cache=TRUE, echo=TRUE}
data <- download.file("http://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip", "data.zip")
data <- unzip("data.zip")
data <- read.csv("activity.csv")
summary(data)
```
# What is mean total number of steps taken per day?
```{r, cache=TRUE, echo=TRUE}
library("plyr")
stepsPerDay <- ddply(data, ~date, summarise, steps = sum(steps))
View(stepsPerDay)
summary(stepsPerDay)
hist(stepsPerDay)
?hist
source('~/.active-rstudio-document', echo=TRUE)
?ggplot2
?ggplot
ggplot(stepsPerDay)
ggplot(stepsPerDay, steps)
?aes
ggplot(stepsPerDay, aes(steps))
stepsPerDay <- ddply(data, ~date, summarise, steps = sum(steps))
ggplot(stepsPerDay, aes(steps))
p <- ggplot(stepsPerDay, aes(steps))
p
?ggplot
p <- ggplot(steps)
plot <- geom_histogram(stepsPerDay, steps)
stepsPerDay <- ddply(data, ~date, summarise, steps = sum(steps))
plot <- geom_histogram(stepsPerDay, steps)
plot <- geom_histogram(stepsPerDay, aes(steps))
stepsPerDay <- ddply(data, ~date, summarise, steps = sum(steps))
stepsPerDay <- ddply(data, ~date, summarise, steps = sum(steps))
plot <- ggplot(stepsPerDay, aes(steps))
plot <- plot + geom_histogram(fill = "white", color = "black")
plot
plot <- plot + geom_histogram(fill = "white", color = "black") + ggtitle("Total Number of Steps per Day") + xlab("Steps per Day")
plot <- plot + geom_histogram(fill = "white", color = "black") + ggtitle("Total Number of Steps per Day") + xlab("Steps per Day")
plot
```{r, cache=TRUE, echo=TRUE}
stepsPerDay <- ddply(data, ~date, summarise, steps = sum(steps))
plot <- ggplot(stepsPerDay, aes(steps)) + geom_histogram(fill = "white", color = "black") + ggtitle("Total Number of Steps per Day") + xlab("Steps per Day")
plot
steps
stepsPerDay
plot <- ggplot(stepsPerDay, aes(steps)) + geom_histogram(fill = "white", color = "black") + ggtitle("Total Number of Steps per Day") + xlab("Steps per Day") + xlab("Number of Steps")
plot <- ggplot(stepsPerDay, aes(steps)) + geom_histogram(fill = "white", color = "black") + ggtitle("Total Number of Steps per Day") + xlab("Steps per Day") + xlab("Number of Steps")
source('~/.active-rstudio-document', echo=TRUE)
plot <- ggplot(stepsPerDay, aes(steps)) + geom_histogram(fill = "white", color = "black") + ggtitle("Total Number of Steps per Day") + xlab("Steps per Day") + ylab("Number of Steps")
plot
plot <- ggplot(stepsPerDay, aes(steps)) + geom_histogram(fill = "white", color = "black") + ggtitle("Total Number of Steps per Day") + xlab("Steps per Day")
plot
stepsPerDay
plot <- ggplot(stepsPerDay$date, aes(steps)) + geom_histogram(fill = "white", color = "black") + ggtitle("Total Number of Steps per Day") + xlab("Steps per Day")
stepsPerDay <- ddply(data, ~date, summarise, steps = sum(steps))
plot <- ggplot(stepsPerDay$date, aes(steps)) + geom_histogram(fill = "white", color = "black") + ggtitle("Total Number of Steps per Day") + xlab("Steps per Day")
plot <- ggplot(stepsPerDay, aes(stepsPerDay$date)) + geom_histogram(fill = "white", color = "black") + ggtitle("Total Number of Steps per Day") + xlab("Steps per Day")
plot
?ggplot
---
stepsPerDay <- ddply(data, ~date, summarise, steps = sum(steps))
plot <- ggplot(stepsPerDay, aes(x = stepsPerDay$date, y = stepsPerDay$steps)) + geom_histogram(fill = "white", color = "black") + ggtitle("Total Number of Steps per Day") + xlab("Steps per Day")
plot <- ggplot(aes(x = stepsPerDay$date, y = stepsPerDay$steps)) + geom_histogram(fill = "white", color = "black") + ggtitle("Total Number of Steps per Day") + xlab("Steps per Day")
stepsPerDay <- ddply(data, ~date, summarise, steps = sum(steps))
plot <- ggplot(stepsPerDay, aes(x = stepsPerDay$date, y = stepsPerDay$steps)) + geom_histogram(fill = "white", color = "black") + ggtitle("Total Number of Steps per Day") + xlab("Steps per Day")
plot
stepsPerDay <- ddply(data, ~date, summarise, steps = sum(steps))
plot <- ggplot(aes(x = stepsPerDay$date, y = stepsPerDay$steps)) + geom_histogram(fill = "white", color = "black") + ggtitle("Total Number of Steps per Day") + xlab("Steps per Day")
plot
plot2 <- barplot(stepsPerDay)
plot2 <- barplot(stepsPerDay, height = stepsPerDay$steps)
plot2 <- barplot(height = stepsPerDay$steps)
plot2 <- barplot(height = stepsPerDay$steps,main="Graph of Total Steps taken per Day", xlab="Dates", ylab="Steps per Day", names.arg=Date)
plot2 <- barplot(height = stepsPerDay$steps,main="Graph of Total Steps taken per Day", xlab="Dates", ylab="Steps per Day", names.arg=stepsPerDay$date)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
stepsPerDay <- ddply(data, ~date, summarise, steps = sum(steps))
plot <- ggplot(stepsPerDay, aes(steps)) + geom_histogram(fill = "white", color = "black") + ggtitle("Total Number of Steps per Day") + xlab("Steps per Day")
plot
plot <- ggplot(stepsPerDay, aes(steps)) + geom_histogram(fill = "white", color = "black") + ggtitle("Total Number of Steps per Day") + xlab("Steps per Day") + ylab("Count")
plot
stepsMean <- mean(stepsPerDay$steps, na.rm = TRUE)
stepsMedian <- median(stepsPerDay$steps, na.rm = TRUE)
print("The mean is" stepsMean)
"The mean is" stepsMean
c("The mean is" stepsMean)
cat("The mean is" stepsMean)
cat("The mean is", stepsMean)
cat("The median is", stepsMedian)
```{r, echo=TRUE}
stepsPerDay <- ddply(data, ~date, summarise, steps = sum(steps))
plot <- ggplot(stepsPerDay, aes(steps)) + geom_histogram(fill = "white", color = "black") + ggtitle("Total Number of Steps per Day") + xlab("Steps per Day") + ylab("Count")
plot
# Mean and Median
stepsMean <- mean(stepsPerDay$steps, na.rm = TRUE)
stepsMedian <- median(stepsPerDay$steps, na.rm = TRUE)
cat("The mean is", stepsMean)
cat("The median is", stepsMedian)
